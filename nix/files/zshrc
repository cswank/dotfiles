# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git z history)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
alias jql="jq -C | less -R"

if [ "$(uname)" = "Linux" ]; then
    alias pbcopy="xclip -sel c"
fi

# For work laptop:
# Nix
# if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
#   . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
# fi
# End Nix

unsetopt share_history

export GOPATH=$HOME/go
export PATH=$HOME/go/bin:$PATH
export PATH=$PATH:/usr/local/bin
export AWS_SDK_LOAD_CONFIG=true
export FORECAST_API_KEY=3cca64010571bc7f268639a25f7c37fe
export GOPRIVATE='github.com/parsyl'
export EDITOR='emacsclient -nw'
export MCLI_HOST='aurora.local:50051'
export MCLI_REMOTE_SPEAKERS=true
export PGPASSFILE=$HOME/.pgpass
export PATH=$PATH:$HOME/.npm-packages/bin
export NODE_PATH=$HOME/.npm-packages/lib/node_modules
export PARSYL_XRAY=false

keychain $HOME/.ssh/id_ed25519
source $HOME/.keychain/$HOST-sh
eval "$(direnv hook zsh)"

function em() {
    if [ $# -eq 0 ]
    then
        emacsclient -nw -e '(switch-to-buffer "*scratch*")'        
    else
        emacsclient -nw $1
    fi
}

if [[ -n ${EMACS} ]]; then
    zstyle ':prezto:module:terminal' auto-title 'no'
fi

if [ -n "$INSIDE_EMACS" ]; then
    chpwd() {
        print -P "\033AnSiTc %d"
    }

    print -P "\033AnSiTu %n"
    print -P "\033AnSiTc %d"
fi

function psaux() {
    PS=$(ps aux)
    HEAD=$(echo $PS | head -1)
    PROC=$(echo $PS | grep $1)
    echo $HEAD
    echo $PROC
}

function aws-env() {
    LAMBDA=$1
    while IFS=$'\t' read -r key val; do
        key=$(echo $key | sed 's/^"\(.*\)"$/\1/')
        export $key=$val
    done < <(aws lambda get-function --function-name $LAMBDA | jq -r '.Configuration.Environment.Variables | to_entries[] | [.key,.value] | @tsv')
}

function refresh-dev() {
    refresh-env 'dev' 'https://api.dev.parsyl.io' $1
}

function refresh-test() {
    refresh-env 'test' 'https://api.test.parsyl.io' $1
}

function refresh-test2() {
    refresh-env 'test2' 'https://api.test2.parsyl.io' $1
}

function refresh-prod() {
    refresh-env 'prod' 'https://api.parsyl.io' $1
}

function refresh-env() {
    ENV=$1
    HST=$2
    USR=$3
    if [ -z "$USR" ]; then
        PTH="$HOME/.parsyl/login/$ENV.json"
    else
        PTH="$HOME/.parsyl/login/$ENV.$USR.json"
    fi
    BODY=$(cat $PTH)
    USRID=$(echo $BODY | jq '.userId')
    RESP=$(curl -s "${HST}/token?refresh=true" -d $BODY)
    OUT=$(echo $RESP | jq ". += {\"userId\":$USRID}")
    echo $OUT > $PTH
    export TOKEN=$(echo $RESP | jq '.accessToken' | tr -d '"')
    export AUTH="Authorization: Bearer $TOKEN"
}

function ins-dev-token() {
    ins-token 'dev'
}

function ins-test-token() {
    ins-token 'test'
}

function ins-prod-token() {
    ins-token 'prod'
}

function ins-token () {
    ENV=$1
    . "$HOME/.parsyl/login/ins-$ENV.env"

    export TOKEN=$(ins-auth)
    export AUTH="Authorization: $TOKEN"
}

function dev-token() {
    use-env 'dev' $1
}

function test-token() {
    use-env 'test' $1
}

function prod-token() {
    use-env 'prod' $1
}

function use-env () {
    ENV=$1
    USR=$2
    if [ -z "$USR" ]; then
        PTH="$HOME/.parsyl/login/$ENV.json"
    else
        PTH="$HOME/.parsyl/login/$ENV.$USR.json"
    fi
    
    BODY=$(cat $PTH)
    export TOKEN=$(echo $BODY | jq '.accessToken' | tr -d '"')
    export AUTH="Authorization: Bearer $TOKEN"
}

function m2m-dev() {
    m2m-env 'dev' 'https://api.dev.parsyl.io'
}

function m2m-test() {
    m2m-env 'test' 'https://api.test.parsyl.io'
}

function m2m-prod() {
    m2m-env 'prod' 'https://api.parsyl.io'
}

function m2m-env () {
    ENV=$1
    HST=$2
    PTH="$HOME/.parsyl/login/m2m.$ENV.json"

    BODY=$(cat $PTH)
    RESP=$(curl -s "${HST}/login" -d $BODY)

    export TOKEN=$(echo $RESP | jq '.accessToken' | tr -d '"')
    export AUTH="Authorization: Bearer $TOKEN"
}

ACME="$HOME/.acme.sh/acme.sh.env"
if test -f "$ACME"; then
  . $ACME
fi

function notes() {
    head $(ls -B | grep RELEASE_NOTES)
}

function pw() {
    keepassxc-cli clip ~/Documents/Passwords.kdbx $1 0
}

function lspw() {
    keepassxc-cli ls -R ~/Documents/Passwords.kdbx
}

function upload-latest-raw() {
    ENV=$1
    DEV=$2
    GW=$3

    FILE=$(aws s3 ls --recursive s3://parsyl-raw-device-data-$ENV-useast1/$DEV | sort | tail -1 | awk '{print $4}')
    aws s3 cp s3://parsyl-raw-device-data-$ENV-useast1/$FILE /tmp/$DEV.zip > /dev/null

    upload-raw $ENV $DEV /tmp/$DEV.zip $GW
}

function upload-all-raw() {
    ENV=$1
    DEV=$2
    GW=$3

    while read FILE; do
        aws s3 cp s3://parsyl-raw-device-data-$ENV-useast1/$FILE /tmp/$DEV.zip > /dev/null
        upload-raw $ENV $DEV /tmp/$DEV.zip $GW
    done < <(aws s3 ls --recursive s3://parsyl-raw-device-data-$ENV-useast1/$DEV | sort | awk '{print $4}')
}

function upload-raw() {
    ENV=$1
    DEV=$2
    FILE=$3
    GW=$4

    PAYLOAD=$(cat $FILE | base64 | tr -d '\n')

    if [ -z "$GW" ]; then
        JSON="{\"data\": \"$PAYLOAD\"}"
    else
        JSON="{\"data\": \"$PAYLOAD\",\"gatewayId\":\"$GW\"}"
    fi

    if [ "$ENV" = "production" ]; then
        URL="https://api.parsyl.io/devices/${DEV}/measurements"
    elif [ "$ENV" = "localhost" ]; then
        URL="http://localhost:8081/devices/${DEV}/measurements"
    else
        URL="https://api.${ENV}.parsyl.io/devices/${DEV}/measurements"
    fi

    echo $JSON > /tmp/json

    
    curl -i -XPUT -H "${AUTH}" -H 'Content-Type: application/json' $URL --data "@/tmp/json"
}

function latest-raw() {
    DEV=$1
    ENV=$2
    if [ -z "$ENV" ]; then
        ENV="production"
    fi

    FILE=$(aws s3 ls --recursive s3://parsyl-raw-device-data-$ENV-useast1/$DEV | sort | tail -1 | awk '{print $4}')
    aws s3 cp s3://parsyl-raw-device-data-$ENV-useast1/$FILE /tmp/$DEV.zip > /dev/null
    parqifi read raw --version v4 -i /tmp/$DEV.zip
}

function latest-raws() {
    DEV=$1
    ENV=$2
    if [ -z "$ENV" ]; then
        ENV="production"
    fi

    aws s3 ls --recursive s3://parsyl-raw-device-data-$ENV-useast1/$DEV | sort | tail -20
}

function nice-id() {
    NICE=$1
    ENV=$2

    if [ -n "$ENV" ]; then
        ENV=".$ENV"
    fi

    curl -s -H "${AUTH}" https://api${ENV}.parsyl.io/devices\?search\=${NICE} | jq '.[].deviceId' | tr -d '"'
}

function set-union () {
    sort $1 $2 | uniq
}

function set-difference () {
    sort $1 $2 $2 | uniq -u
}

function set-symmetric-difference() {
    sort $1 $2 | uniq -u
}

function countRequests() {
    while read line; do
        count=$(echo $line | cut -d ' ' -f1)
        id=$(echo $line | cut -d ' ' -f2)
        if [ ${#id} -ge 30 ]; then
            email=$(curl -s -H "${AUTH}" https://api.test.parsyl.io/users/${id} | jq '.email')
            echo $count $id $email
        fi
    done < <(cw tail /aws/lambda/APIHandler -b$1 | grep 'with token' | jq '.message' | tr -d '"' | cut -d ' ' -f4 | jwt | jq '.sub' | tr -d '"' | sort | uniq -c)
}
